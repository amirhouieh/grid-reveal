{"code":"export const drawTheGrid = (args) => {\r\n    const GRID_CLASSNAME = \"webgrider_grid\";\r\n    const HIDE_CLASSNAME = \"webgrider_hide\";\r\n    /*Int value, if presents, elements with less text length will be ignored*/\r\n    const textLength = args.textLength;\r\n    /*float value 0-1, if present the more the bigger blocks (less details)*/\r\n    const sizeThreshold = args.sizeThreshold;\r\n    const GRID_CSS = [\r\n        'box-shadow: 0px 0px 0px 2px rgba(0,0,0,1) !important',\r\n        'opacity: 1 !important'\r\n    ];\r\n    const RESET_CSS = [\r\n        'background: rgba(0,0,0,0); !important',\r\n        'background-image: none !important',\r\n        'background-color: rgba(0,0,0,0) !important',\r\n        'border: none !important',\r\n        'filter: none !important'\r\n    ];\r\n    const GRID_CSS_RULE = {\r\n        selector: `.${GRID_CLASSNAME}`,\r\n        style: GRID_CSS.join(\";\") + \";\"\r\n    };\r\n    const HIDE_CSS_RULE = {\r\n        selector: `input,.${HIDE_CLASSNAME},select,body *:before,body *:after`,\r\n        style: 'opacity: 0 !important;'\r\n    };\r\n    const RESET_CSS_RULE = {\r\n        selector: \"body *,body,html\",\r\n        style: RESET_CSS.join(\";\") + \";\"\r\n    };\r\n    document.styleSheets[0].addRule(GRID_CSS_RULE.selector, GRID_CSS_RULE.style);\r\n    document.styleSheets[0].addRule(HIDE_CSS_RULE.selector, HIDE_CSS_RULE.style);\r\n    document.styleSheets[0].addRule(RESET_CSS_RULE.selector, RESET_CSS_RULE.style);\r\n    const isVisibleNode = (node) => {\r\n        //@ts-ignore\r\n        return (!node.parentNode.tagName.match(/^(STYLE|SCRIPT|IFRAME|BODY)$/gi));\r\n    };\r\n    const getSizeScale = (w, h) => {\r\n        return (w * h) / (window.screen.width * window.screen.height);\r\n    };\r\n    const isImage = (node) => {\r\n        return node.tagName == \"IMG\" || node.style.background.length > 1;\r\n    };\r\n    const isLarge = (node) => {\r\n        if (!sizeThreshold)\r\n            return true;\r\n        const size = getSizeScale(node.offsetWidth, node.offsetHeight);\r\n        return size >= sizeThreshold;\r\n    };\r\n    const isLong = (node) => {\r\n        if (!textLength)\r\n            return true;\r\n        return node.innerHTML.length > textLength;\r\n    };\r\n    function resetTextNodes() {\r\n        const tree = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT, { acceptNode: isVisibleNode }, false);\r\n        let node;\r\n        while (node = tree.nextNode())\r\n            if (node && node.nodeValue.trim().length > 0) {\r\n                const wrapper = document.createElement('span');\r\n                wrapper.className = HIDE_CLASSNAME;\r\n                wrapper.appendChild(node.parentNode.replaceChild(wrapper, node));\r\n            }\r\n    }\r\n    function resetImgNodes() {\r\n        const filter = function (node) {\r\n            if (isImage(node))\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            else\r\n                return NodeFilter.FILTER_SKIP;\r\n        };\r\n        const walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: filter }, false);\r\n        while (walker.nextNode()) {\r\n            //@ts-ignore\r\n            walker.currentNode.src = \"none\";\r\n            //@ts-ignore\r\n            walker.currentNode.style.backgroundImage = \"none\";\r\n            //@ts-ignore\r\n            walker.currentNode.alt = \"\";\r\n            //@ts-ignore\r\n            walker.currentNode.className += ` ${HIDE_CLASSNAME}`;\r\n        }\r\n    }\r\n    function drawGrid() {\r\n        const filter = function (node) {\r\n            if (!isVisibleNode(node))\r\n                return NodeFilter.FILTER_SKIP;\r\n            const islarge = isLarge(node);\r\n            const islong = isLong(node);\r\n            if ((islarge && islong) || (isImage(node) && islarge)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        };\r\n        const walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: filter }, false);\r\n        while (walker.nextNode()) {\r\n            //@ts-ignore\r\n            walker.currentNode.className += ` ${GRID_CLASSNAME}`;\r\n        }\r\n    }\r\n    resetTextNodes();\r\n    drawGrid();\r\n    resetImgNodes();\r\n};\r\n//# sourceMappingURL=renderer.js.map","references":["/Users/amir/projects/webgrider/src/index.ts"],"map":"{\"version\":3,\"file\":\"renderer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/renderer.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/amir/projects/webgrider/renderer.d.ts","writeByteOrderMark":false,"text":"import { TGridRevealRenderOptions } from \"./index\";\r\nexport declare type TNode = Node & HTMLElement;\r\nexport declare const drawTheGrid: (args: TGridRevealRenderOptions) => void;\r\n"}}
