{"code":"import puppeteer from \"puppeteer\";\r\nimport { drawTheGrid } from \"./renderer\";\r\nconst defaultRenderOpt = {\r\n    textLength: 100,\r\n    sizeThreshold: 0.1\r\n};\r\nconst defaultViewPort = {\r\n    width: 1400,\r\n    height: 1200\r\n};\r\nconst defaultScreenshotOptions = {\r\n    fullPage: true,\r\n    omitBackground: true,\r\n    encoding: \"base64\"\r\n};\r\nexport class GridReveal {\r\n    constructor() {\r\n        this.state = { busy: false };\r\n    }\r\n    async init() {\r\n        this.browser = await puppeteer.launch();\r\n    }\r\n    setState(state) {\r\n        this.state = { ...this.state, ...state };\r\n    }\r\n    getRenderOptions(opt = defaultRenderOpt) {\r\n        /*Int value, if presents, elements with less text length will be ignored*/\r\n        const textLength = typeof opt.textLength === \"undefined\" ? defaultRenderOpt.textLength : opt.textLength;\r\n        /*float value 0-1, if present the more the bigger blocks (less details)*/\r\n        const sizeThreshold = typeof opt.sizeThreshold === \"undefined\" ? defaultRenderOpt.sizeThreshold : opt.sizeThreshold;\r\n        return { textLength, sizeThreshold };\r\n    }\r\n    getViewportOptions(opt) {\r\n        return { ...defaultViewPort, ...(opt || {}) };\r\n    }\r\n    async renderPage(url, options = {}) {\r\n        //For later in case we want to close browser on idle\r\n        if (!this.browser) {\r\n            await this.init();\r\n        }\r\n        const viewportOpt = this.getViewportOptions(options.viewPort);\r\n        const renderOpt = this.getRenderOptions(options.renderOptions);\r\n        this.setState({ busy: true });\r\n        //open browser page\r\n        const page = await this.browser.newPage();\r\n        // page.on('console', consoleObj => console.log(consoleObj.text()));\r\n        //set the window size\r\n        await page.setViewport(viewportOpt);\r\n        //open and load the url\r\n        await page.goto(url, { waitUntil: 'networkidle2' });\r\n        //take the screenshot of original view\r\n        const originalBase64 = await page.screenshot(defaultScreenshotOptions);\r\n        //drawing the grid\r\n        await page.evaluate(drawTheGrid, renderOpt);\r\n        //take the screenshot of the view with the grid\r\n        const gridBase64 = await page.screenshot(defaultScreenshotOptions);\r\n        //close the page\r\n        await page.close();\r\n        this.setState({ busy: false });\r\n        //return both screenshots in base64 format\r\n        //@ts-ignore\r\n        return { originalBase64, gridBase64, options: { viewPort: viewportOpt, renderOptions: renderOpt } };\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/Users/amir/projects/webgrider/node_modules/puppeteer/lib/types.d.ts","/Users/amir/projects/webgrider/src/renderer.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/amir/projects/webgrider/index.d.ts","writeByteOrderMark":false,"text":"import { Browser, Viewport } from \"puppeteer\";\r\nexport declare type TGridRevealStateOpt = {\r\n    busy?: boolean;\r\n};\r\nexport declare type TGridRevealState = {\r\n    busy: boolean;\r\n};\r\nexport declare type TGridRevealRenderOutput = {\r\n    originalBase64: string;\r\n    gridBase64: string;\r\n    options: {\r\n        viewPort: Viewport;\r\n        renderOptions: TGridRevealRenderOptions;\r\n    };\r\n};\r\nexport declare type TGridRevealRenderPageOptions = {\r\n    viewPort?: Viewport;\r\n    renderOptions?: TGridRevealRenderOptions;\r\n};\r\nexport interface TGridRevealRenderOptions {\r\n    textLength?: number | null;\r\n    sizeThreshold?: number | null;\r\n}\r\nexport declare class GridReveal {\r\n    browser: Browser;\r\n    state: TGridRevealState;\r\n    constructor();\r\n    init(): Promise<void>;\r\n    private setState;\r\n    getRenderOptions(opt?: TGridRevealRenderOptions): TGridRevealRenderOptions;\r\n    getViewportOptions(opt: Viewport | undefined): Viewport;\r\n    renderPage(url: string, options?: TGridRevealRenderPageOptions): Promise<TGridRevealRenderOutput>;\r\n}\r\n"}}
